import html
import importlib
import json
import re
import time
import traceback
from sys import argv
from typing import Optional

from telegram import (
    Chat,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    Message,
    ParseMode,
    Update,
    User,
)
from telegram.error import (
    BadRequest,
    ChatMigrated,
    NetworkError,
    TelegramError,
    TimedOut,
    Unauthorized,
)
from telegram.ext import (
    CallbackContext,
    CallbackQueryHandler,
    CommandHandler,
    Filters,
    MessageHandler,
)
from telegram.ext.dispatcher import DispatcherHandlerStop, run_async
from telegram.utils.helpers import escape_markdown

from Angel import (
    ALLOW_EXCL,
    BL_CHATS,
    CERT_PATH,
    DONATION_LINK,
    LOGGER,
    OWNER_ID,
    PORT,
    SUPPORT_CHAT,
    TOKEN,
    URL,
    WEBHOOK,
    WHITELIST_CHATS,
    StartTime,
    dispatcher,
    pbot,
    telethn,
    updater,
)

# needed to dynamically load modules
# NOTE: Module order is not guaranteed, specify that in the config file!
from Angel.modules import ALL_MODULES
from Angel.modules.helper_funcs.alternate import typing_action
from Angel.modules.helper_funcs.chat_status import is_user_admin
from Angel.modules.helper_funcs.misc import paginate_modules
from Angel.modules.helper_funcs.readable_time import get_readable_time

PM_START_TEXT = """
üëã  ú·¥á è ·¥õ ú·¥á Ä·¥á, ·¥ç è …¥·¥Ä·¥ç·¥á …™s üçÉ ‚è§ÕüÕûüá≤…™ssñß∑‚û∫üá¶…¥…¢·¥á ü ‚úò „ÄåüáÆüá≥„Äç. 
‚û•…™'·¥ç ·¥Ä ·¥ò·¥è·¥°·¥á ÄÍú∞·¥ú ü ü …¢ Ä·¥è·¥ú·¥ò ·¥ç·¥Ä…¥·¥Ä…¢·¥á Ä  ô·¥è·¥õüèÑ‚Äç‚ôÄÔ∏è ·¥°…™·¥õ ú ·¥Ñ·¥è·¥è ü ·¥ç·¥è·¥Ö·¥ú ü·¥ás. Íú∞·¥á·¥á ü Íú∞ Ä·¥á·¥á ·¥õ·¥è ·¥Ä·¥Ö·¥Ö ·¥ç·¥á ·¥õ·¥è  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥òs!  üçì
"""

buttons = [
    [
        InlineKeyboardButton(
            text="·¥Ä…¥…¢·¥á ü …¥·¥á·¥°süõ∞‚ôÇÔ∏è", url="https://t.me/angelxupdates"
        ),
        InlineKeyboardButton(
            text="·¥ç·¥è…™  ú·¥á·¥Ä·¥†·¥á…¥ üèù", url="https://t.me/NatsukiSupport_Official"
        ),
    ],
    [
        InlineKeyboardButton(
            text="s·¥è·¥ú Ä·¥Ñ·¥á üÜì", url="https://github.com/Vickyftw/Miss-Angel-Group-Manager"
        ),
        InlineKeyboardButton(
            text="üîª  ú·¥á ü·¥ò ·¥ç·¥á…¥·¥ú üîª", callback_data="help_back"
        ),
    ],
    [
        InlineKeyboardButton(
            text="‚ùÑÔ∏è ·¥Ä·¥Ö·¥Ö ·¥ç·¥á ·¥õ·¥è  è·¥è·¥ú Ä …¢ Ä·¥ò  ô·¥Ä ô·¥á ‚ùÑÔ∏è",
            url="t.me/AngelxRobot?startgroup=true",
        ),
    ],
]

ANGEL_IMG = "https://telegra.ph/file/60ee9c876eb643440e29a.png"

HELP_STRINGS = f"""
*Main Commands :* [‚ù§Ô∏è‚Äçü©π](https://telegra.ph/file/60ee9c876eb643440e29a.png)

·¥Ä…¥…¢·¥á ü ‚úò  Ä·¥è ô·¥è   ·¥áx·¥Ñ ü·¥ús…™·¥†·¥á Íú∞·¥á·¥Ä·¥õ·¥ú Ä·¥ás
¬ª ·¥Ñ ú·¥á·¥Ñ·¥ã·¥è·¥ú·¥õ ·¥Ä ü ü ·¥õ ú·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös
¬ª ·¥Ä ü ü ·¥èÍú∞ ·¥ç è ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ös ·¥Ñ·¥Ä…¥  ô·¥á ·¥ús·¥á·¥Ö ·¥°…™·¥õ ú / ·¥è Ä !
¬ª …™Íú∞  è·¥è·¥ú …¢·¥è·¥õ ·¥Ä…¥ è …™ss·¥ú·¥á ·¥è Ä  ô·¥ú…¢ …™…¥ ·¥Ä…¥ è ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö ·¥ò ü·¥á·¥Äs·¥á  Ä·¥á·¥ò·¥è Ä·¥õ …™·¥õ ·¥õ·¥è @angelsupports

„Ö§„Ö§„Ö§„Ö§„Ö§„Ö§ êéì‚úó ·¥ç·¥Ä…™…¥ ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥ÖÍú±

‚û≤ /start : Íú±·¥õ·¥Ä Ä·¥õÍú± ·¥ç·¥á | ·¥Ä·¥Ñ·¥Ñ·¥è Ä·¥Ö…™…¥…¢ ·¥õ·¥è ·¥ç·¥á  è·¥è·¥ú'·¥†·¥á ·¥Ä ü Ä·¥á·¥Ä·¥Ö è ·¥Ö·¥è…¥·¥á …™·¥õ .
‚û≤ /donate : s·¥ú·¥ò·¥ò·¥è Ä·¥õ ·¥ç·¥á  ô è ·¥Ö·¥è…¥·¥Ä·¥õ…™…¥…¢ Íú∞·¥è Ä ·¥ç è  ú·¥Ä Ä·¥Ö·¥°·¥è Ä·¥ã .
‚û≤ /help  : ·¥Ä·¥†·¥Ä…™ ü·¥Ä ô ü·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥ÖÍú± Íú±·¥á·¥Ñ·¥õ…™·¥è…¥.
  ‚Ä£ …™…¥ ·¥ò·¥ç : ·¥°…™ ü ü Íú±·¥á…¥·¥Ö  è·¥è·¥ú  ú·¥á ü·¥ò  Íú∞·¥è Ä ·¥Ä ü ü Íú±·¥ú·¥ò·¥ò·¥è Ä·¥õ·¥á·¥Ö ·¥ç·¥è·¥Ö·¥ú ü·¥áÍú±.
  ‚Ä£ …™…¥ …¢ Ä·¥è·¥ú·¥ò : ·¥°…™ ü ü  Ä·¥á·¥Ö…™ Ä·¥á·¥Ñ·¥õ  è·¥è·¥ú ·¥õ·¥è ·¥ò·¥ç, ·¥°…™·¥õ ú ·¥Ä ü ü ·¥õ ú·¥Ä·¥õ  ú·¥á ü·¥ò  ·¥ç·¥è·¥Ö·¥ú ü·¥áÍú±.
""".format(
    dispatcher.bot.first_name,
    "" if not ALLOW_EXCL else "\nAll commands can either be used with / or !.\n",
)


DONATE_STRING = """Heya, glad to hear you want to donate!
You can donate to the original writer's of the Base code,
Support them  [·¥†…™·¥Ñ·¥ã è ‚úó  Íú∞·¥õ·¥°](t.me/IM_V1CKY)"""

IMPORTED = {}
MIGRATEABLE = []
HELPABLE = {}
STATS = []
USER_INFO = []
USER_BOOK = []
DATA_IMPORT = []
DATA_EXPORT = []

CHAT_SETTINGS = {}
USER_SETTINGS = {}

GDPR = []

for module_name in ALL_MODULES:
    imported_module = importlib.import_module("Angel.modules." + module_name)
    if not hasattr(imported_module, "__mod_name__"):
        imported_module.__mod_name__ = imported_module.__name__

    if not imported_module.__mod_name__.lower() in IMPORTED:
        IMPORTED[imported_module.__mod_name__.lower()] = imported_module
    else:
        raise Exception("Can't have two modules with the same name! Please change one")

    if hasattr(imported_module, "__help__") and imported_module.__help__:
        HELPABLE[imported_module.__mod_name__.lower()] = imported_module

    # Chats to migrate on chat_migrated events
    if hasattr(imported_module, "__migrate__"):
        MIGRATEABLE.append(imported_module)

    if hasattr(imported_module, "__stats__"):
        STATS.append(imported_module)

    if hasattr(imported_module, "__gdpr__"):
        GDPR.append(imported_module)

    if hasattr(imported_module, "__user_info__"):
        USER_INFO.append(imported_module)

    if hasattr(imported_module, "__user_book__"):
        USER_BOOK.append(imported_module)

    if hasattr(imported_module, "__import_data__"):
        DATA_IMPORT.append(imported_module)

    if hasattr(imported_module, "__export_data__"):
        DATA_EXPORT.append(imported_module)

    if hasattr(imported_module, "__chat_settings__"):
        CHAT_SETTINGS[imported_module.__mod_name__.lower()] = imported_module

    if hasattr(imported_module, "__user_settings__"):
        USER_SETTINGS[imported_module.__mod_name__.lower()] = imported_module


# do not async
def send_help(chat_id, text, keyboard=None):
    if not keyboard:
        keyboard = InlineKeyboardMarkup(paginate_modules(0, HELPABLE, "help"))
    dispatcher.bot.send_message(
        chat_id=chat_id, text=text, parse_mode=ParseMode.MARKDOWN, reply_markup=keyboard
    )


@run_async
def test(update, context):
    try:
        print(update)
    except:
        pass
    update.effective_message.reply_text(
        "Hola tester! _I_ *have* `markdown`", parse_mode=ParseMode.MARKDOWN
    )
    update.effective_message.reply_text("This person edited a message")
    print(update.effective_message)


@run_async
def start(update: Update, context: CallbackContext):
    args = context.args
    uptime = get_readable_time((time.time() - StartTime))
    if update.effective_chat.type == "private":
        if len(args) >= 1:
            if args[0].lower() == "help":
                send_help(update.effective_chat.id, HELP_STRINGS)
            elif args[0].lower().startswith("ghelp_"):
                mod = args[0].lower().split("_", 1)[1]
                if not HELPABLE.get(mod, False):
                    return
                send_help(
                    update.effective_chat.id,
                    HELPABLE[mod].__help__,
                    InlineKeyboardMarkup(
                        [[InlineKeyboardButton(text="Àπ ô·¥Ä·¥Ñ·¥ã Àº", callback_data="help_back")]]
                    ),
                )

            elif args[0].lower().startswith("stngs_"):
                match = re.match("stngs_(.*)", args[0].lower())
                chat = dispatcher.bot.getChat(match.group(1))

                if is_user_admin(chat, update.effective_user.id):
                    send_settings(match.group(1), update.effective_user.id, False)
                else:
                    send_settings(match.group(1), update.effective_user.id, True)

            elif args[0][1:].isdigit() and "rules" in IMPORTED:
                IMPORTED["rules"].send_rules(update, args[0], from_pm=True)

        else:
            update.effective_user.first_name
            update.effective_message.reply_text(
                PM_START_TEXT,
                reply_markup=InlineKeyboardMarkup(buttons),
                parse_mode=ParseMode.MARKDOWN,
                timeout=60,
            )
    else:
        update.effective_message.reply_text(
            "…™'·¥ç ·¥Ä·¥°·¥Ä·¥ã·¥á ·¥Ä ü Ä·¥á·¥Ä·¥Ö è! üçÇ‚ö°Ô∏è\n<b>‚û• ú·¥Ä·¥†·¥á…¥'·¥õ s ü·¥á·¥ò·¥õ s…™…¥·¥Ñ·¥á ü•¥:</b> <code>{}</code>".format(
                uptime
            ),
            parse_mode=ParseMode.HTML,
        )


def error_handler(update, context):
    """Log the error and send a telegram message to notify the developer."""
    # Log the error before we do anything else, so we can see it even if something breaks.
    LOGGER.error(msg="Exception while handling an update:", exc_info=context.error)

    # traceback.format_exception returns the usual python message about an exception, but as a
    # list of strings rather than a single string, so we have to join them together.
    tb_list = traceback.format_exception(
        None, context.error, context.error.__traceback__
    )
    tb = "".join(tb_list)

    # Build the message with some markup and additional information about what happened.
    message = (
        "An exception was raised while handling an update\n"
        "<pre>update = {}</pre>\n\n"
        "<pre>{}</pre>"
    ).format(
        html.escape(json.dumps(update.to_dict(), indent=2, ensure_ascii=False)),
        html.escape(tb),
    )

    if len(message) >= 4096:
        message = message[:4096]
    # Finally, send the message
    context.bot.send_message(chat_id=OWNER_ID, text=message, parse_mode=ParseMode.HTML)


# for test purposes
def error_callback(update: Update, context: CallbackContext):
    error = context.error
    try:
        raise error
    except Unauthorized:
        print("no nono1")
        print(error)
        # remove update.message.chat_id from conversation list
    except BadRequest:
        print("no nono2")
        print("BadRequest caught")
        print(error)

        # handle malformed requests - read more below!
    except TimedOut:
        print("no nono3")
        # handle slow connection problems
    except NetworkError:
        print("no nono4")
        # handle other connection problems
    except ChatMigrated as err:
        print("no nono5")
        print(err)
        # the chat_id of a group has changed, use e.new_chat_id instead
    except TelegramError:
        print(error)
        # handle all other telegram related errors


@run_async
def help_button(update, context):
    query = update.callback_query
    mod_match = re.match(r"help_module\((.+?)\)", query.data)
    prev_match = re.match(r"help_prev\((.+?)\)", query.data)
    next_match = re.match(r"help_next\((.+?)\)", query.data)
    back_match = re.match(r"help_back", query.data)
    try:
        if mod_match:
            module = mod_match.group(1)
            text = (
                "*‚öä‚ùÆ‚ùÆ‚ùÆ‚ùÆ ÔΩ¢   ú·¥á ü·¥ò  Íú∞·¥è Ä  {}  ·¥ç·¥è·¥Ö·¥ú ü·¥á „Äç‚ùØ‚ùØ‚ùØ‚ùØ‚öä*\n".format(
                    HELPABLE[module].__mod_name__
                )
                + HELPABLE[module].__help__
            )
            query.message.edit_text(
                text=text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(
                    [[InlineKeyboardButton(text="Back", callback_data="help_back")]]
                ),
            )

        elif prev_match:
            curr_page = int(prev_match.group(1))
            query.message.edit_text(
                HELP_STRINGS,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(curr_page - 1, HELPABLE, "help")
                ),
            )

        elif next_match:
            next_page = int(next_match.group(1))
            query.message.edit_text(
                HELP_STRINGS,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(next_page + 1, HELPABLE, "help")
                ),
            )

        elif back_match:
            query.message.edit_text(
                text=HELP_STRINGS,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(0, HELPABLE, "help")
                ),
            )

        # ensure no spinny white circle
        context.bot.answer_callback_query(query.id)
        # query.message.delete()
    except Exception as excp:
        if excp.message == "Message is not modified":
            pass
        elif excp.message == "Query_id_invalid":
            pass
        elif excp.message == "Message can't be deleted":
            pass
        else:
            query.message.edit_text(excp.message)
            LOGGER.exception("Exception in help buttons. %s", str(query.data))


@run_async
def Angel_about_callback(update, context):
    query = update.callback_query
    if query.data == "aboutmanu_":
        query.message.edit_text(
            text=f"* ú…™ ·¥õ ú·¥á Ä·¥á  ·¥õ ú·¥á …¥·¥Ä·¥ç·¥á's {dispatcher.bot.first_name} \n\n·¥Äs  è·¥è·¥ú …™'·¥ç ·¥Ä …¥·¥áx·¥õ …¢·¥á…¥·¥á Ä·¥Ä·¥õ…™·¥è…¥·¥Ä ü …¢ Ä·¥è·¥ú·¥ò ·¥ç·¥Ä…¥·¥Ä…¢·¥á·¥ç·¥á…¥·¥õ  ô·¥è·¥õ ·¥Ö·¥á·¥†·¥á ü·¥è·¥ò·¥á·¥Ö  ô è ·¥Ä…¥…¢·¥á ü ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥ás.* "
            f"\n\n‚ûú ·¥ä·¥è…™…¥ [AngelxNews](https://t.me/angelxupdates) ·¥õ·¥è ·¥ã·¥á·¥á·¥ò  è·¥è·¥ú Äs·¥á üÍú∞ ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á·¥Ö ·¥Ä ô·¥è·¥ú·¥õ {dispatcher.bot.first_name}"
            f"\n\n‚ûú …™  ú·¥Ä·¥†·¥á ·¥õ ú·¥á …¥·¥è Ä·¥ç·¥Ä ü …¢ Ä·¥è·¥ú·¥ò ·¥ç·¥Ä…¥·¥Ä…¢…™…¥…¢ Íú∞·¥ú…¥·¥Ñ·¥õ…™·¥è…¥s  ü…™·¥ã·¥á Íú∞ ü·¥è·¥è·¥Ö ·¥Ñ·¥è…¥·¥õ Ä·¥è ü, ·¥Ä ·¥°·¥Ä Ä…¥…™…¥…¢ s ès·¥õ·¥á·¥ç ·¥á·¥õ·¥Ñ  ô·¥ú·¥õ …™ ·¥ç·¥Ä…™…¥ ü è  ú·¥Ä·¥†·¥á ·¥õ ú·¥á ·¥Ä·¥Ö·¥†·¥Ä…¥·¥Ñ·¥á·¥Ö ·¥Ä…¥·¥Ö  ú·¥Ä…¥·¥Ö è ·¥Ä…¥·¥õ…™s·¥ò·¥Ä·¥ç s ès·¥õ·¥á·¥ç ·¥Ä…¥·¥Ö ·¥õ ú·¥á s…™ ô è ü  ô·¥Ä…¥…¥…™…¥…¢ s ès·¥õ·¥á·¥ç ·¥° ú…™·¥Ñ ú s·¥ÄÍú∞·¥á…¢·¥Ä·¥ú Ä·¥Ös ·¥Ä…¥·¥Ö  ú·¥á ü·¥òs  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò Íú∞ Ä·¥è·¥ç s·¥ò·¥Ä·¥ç·¥ç·¥á Äs."
            f"\n\n‚ûú …™ ·¥Ñ·¥Ä…¥ ·¥ç·¥Ä…¥·¥Ä…¢·¥á  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥òs s·¥ç·¥è·¥è·¥õ ú ü è, ·¥°…™·¥õ ú s·¥è·¥ç·¥á s·¥ò·¥á·¥Ñ…™·¥Ä ü Íú∞·¥á·¥Ä·¥õ·¥ú Ä·¥ás"
            f"\n\n‚ûú  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥ã…¥·¥è·¥° ·¥ç·¥è Ä·¥á ·¥Ä ô·¥è·¥ú·¥õ ·¥ç·¥á  ô è ·¥Ñ ü…™·¥Ñ·¥ã…™…¥…¢ ·¥õ ú·¥á  ô·¥á ü·¥è·¥°  ô·¥ú·¥õ·¥õ·¥è…¥s",
            parse_mode=ParseMode.MARKDOWN,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            text=" ú·¥è·¥° ·¥õ·¥è ·¥ús·¥á ·¥ç·¥á üë©üèº‚Äçüíª", callback_data="aboutmanu_howto"
                        ),
                        InlineKeyboardButton(
                            text="üìï·¥õ·¥á Ä·¥çs ·¥Ä…¥·¥Ö ·¥Ñ·¥è…¥·¥Ö…™·¥õ…™·¥è…¥s ", callback_data="aboutmanu_tac"
                        ),
                    ],
                    [InlineKeyboardButton(text=" ú·¥á ü·¥ò ‚ùî", callback_data="help_back")],
                    [InlineKeyboardButton(text="Àπ ô·¥Ä·¥Ñ·¥ã Àº", callback_data="aboutmanu_back")],
                ]
            ),
        )
    elif query.data == "aboutmanu_back":
        query.message.edit_text(
            PM_START_TEXT,
            reply_markup=InlineKeyboardMarkup(buttons),
            parse_mode=ParseMode.MARKDOWN,
            timeout=60,
        )

    elif query.data == "aboutmanu_howto":
        query.message.edit_text(
            text=f"* ÔΩ¢  ô·¥Äs…™·¥Ñ  ú·¥á ü·¥ò ‚òòÔ∏è„Äç*"
            f"\n è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥Ä üs·¥è ·¥Ä·¥Ö·¥Ö {dispatcher.bot.first_name} ·¥õ·¥è  è·¥è·¥ú Ä ·¥Ñ ú·¥Ä·¥õs  ô è ·¥Ñ ü…™·¥Ñ·¥ã…™…¥…¢ [Here](http://t.me/{dispatcher.bot.username}?startgroup=true) ·¥Ä…¥·¥Ö s·¥á ü·¥á·¥Ñ·¥õ…™…¥…¢ ·¥Ñ ú·¥Ä·¥õ ‚úì. \n"
            f"\n\n è·¥è·¥ú ·¥Ñ·¥Ä…¥ …¢·¥á·¥õ s·¥ú·¥ò·¥ò·¥è Ä·¥õ ü¶© {dispatcher.bot.first_name}  ô è ·¥ä·¥è…™…¥…™…¥…¢ üêæ[ANGEL SUPPORT](https://t.me/angelsupports).\n"
            f"",
            parse_mode=ParseMode.MARKDOWN,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            text="Admins", callback_data="aboutmanu_permis"
                        ),
                        InlineKeyboardButton(text="Help", callback_data="help_back"),
                    ],
                    [InlineKeyboardButton(text="Àπ ô·¥Ä·¥Ñ·¥ã Àº", callback_data="aboutmanu_")],
                ]
            ),
        )
    elif query.data == "aboutmanu_credit":
        query.message.edit_text(
            text=f"*{dispatcher.bot.first_name} …™s ·¥õ ú·¥á  Ä·¥á·¥Ö…™s…™…¢…¥·¥á·¥Ö ·¥†·¥á Äs…™·¥è…¥ ‚ôªÔ∏è ·¥èÍú∞ ·¥Ö·¥Ä…™s è ·¥Ä…¥·¥Ö …¥·¥Ä Ä·¥ú·¥õ·¥è Íú∞·¥è Ä ·¥õ ú·¥á  ô·¥ás·¥õ ·¥ò·¥á ÄÍú∞·¥è Ä·¥ç·¥Ä…¥·¥Ñ·¥á üöÄ.*"
            f"\n\n ô·¥Äs·¥á·¥Ö ·¥è…¥ [S…™ ü·¥á…¥·¥õ„ÄåüáÆüá≥„ÄçB·¥è·¥õs](https://t.me/SILENT_BOTS)."
            f"\n\n{dispatcher.bot.first_name}'s s·¥è·¥ú Ä·¥Ñ·¥á ·¥Ñ·¥è·¥Ö·¥á ·¥°·¥Äs ·¥° Ä…™·¥õ·¥õ·¥á…¥  ô è ·¥†…™·¥Ñ·¥ã è ü•ÄüçÇ‚ú®"
            f"\n\n…™Íú∞ ·¥Ä…¥ è «´·¥ú·¥ás·¥õ…™·¥è…¥ ·¥Ä ô·¥è·¥ú·¥õ  {dispatcher.bot.first_name}, \n ü·¥á·¥õ ·¥ús ·¥ã…¥·¥è·¥° ·¥Ä·¥õ üëÇ @{SUPPORT_CHAT}.",
            parse_mode=ParseMode.MARKDOWN,
            disable_web_page_preview=True,
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton(text="Àπ ô·¥Ä·¥Ñ·¥ã Àº", callback_data="aboutmanu_tac")]]
            ),
        )

    elif query.data == "aboutmanu_permis":
        query.message.edit_text(
            text=f"<b> ÔΩ¢ ·¥Ä·¥Ö·¥ç…™…¥ ·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥s „Äç</b>"
            f"\n·¥õ·¥è ·¥Ä·¥†·¥è…™·¥Ö s ü·¥è·¥°…™…¥…¢ ·¥Ö·¥è·¥°…¥, {dispatcher.bot.first_name} ·¥Ñ·¥Ä·¥Ñ ú·¥ás ·¥Ä·¥Ö·¥ç…™…¥  Ä…™…¢ ú·¥õs Íú∞·¥è Ä ·¥á·¥Ä·¥Ñ ú ·¥ús·¥á Ä. ·¥õ ú…™s ·¥Ñ·¥Ä·¥Ñ ú·¥á  ü·¥Äs·¥õs ·¥Ä ô·¥è·¥ú·¥õ 10 ·¥ç…™…¥·¥ú·¥õ·¥ás; ·¥õ ú…™s ·¥ç·¥Ä è ·¥Ñ ú·¥Ä…¥…¢·¥á …™…¥ ·¥õ ú·¥á Íú∞·¥ú·¥õ·¥ú Ä·¥á. ·¥õ ú…™s ·¥ç·¥á·¥Ä…¥s ·¥õ ú·¥Ä·¥õ …™Íú∞  è·¥è·¥ú ·¥ò Ä·¥è·¥ç·¥è·¥õ·¥á ·¥Ä ·¥ús·¥á Ä ·¥ç·¥Ä…¥·¥ú·¥Ä ü ü è (·¥°…™·¥õ ú·¥è·¥ú·¥õ ·¥ús…™…¥…¢ ·¥õ ú·¥á /·¥ò Ä·¥è·¥ç·¥è·¥õ·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö), {dispatcher.bot.first_name} ·¥°…™ ü ü ·¥è…¥ ü è Íú∞…™…¥·¥Ö ·¥è·¥ú·¥õ ~10 ·¥ç…™…¥·¥ú·¥õ·¥ás  ü·¥Ä·¥õ·¥á Ä."
            f"\n\n…™Íú∞  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ ·¥õ·¥è ·¥ú·¥ò·¥Ö·¥Ä·¥õ·¥á ·¥õ ú·¥á·¥ç …™·¥ç·¥ç·¥á·¥Ö…™·¥Ä·¥õ·¥á ü è,  è·¥è·¥ú ·¥Ñ·¥Ä…¥ ·¥ús·¥á ·¥õ ú·¥á /·¥Ä·¥Ö·¥ç…™…¥·¥Ñ·¥Ä·¥Ñ ú·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö,·¥õ ú·¥õ·¥Ä' ü ü Íú∞·¥è Ä·¥Ñ·¥á{dispatcher.bot.first_name} ·¥õ·¥è ·¥Ñ ú·¥á·¥Ñ·¥ã ·¥° ú·¥è ·¥õ ú·¥á ·¥Ä·¥Ö·¥ç…™…¥s ·¥Ä Ä·¥á ·¥Ä…¢·¥Ä…™…¥ ·¥Ä…¥·¥Ö ·¥õ ú·¥á…™ Ä ·¥ò·¥á Ä·¥ç…™ss…™·¥è…¥s"
            f"\n\n…™Íú∞  è·¥è·¥ú ·¥Ä Ä·¥á …¢·¥á·¥õ·¥õ…™…¥…¢ ·¥Ä ·¥ç·¥áss·¥Ä…¢·¥á s·¥Ä è…™…¥…¢:"
            f"\n<Code> è·¥è·¥ú ·¥ç·¥ús·¥õ  ô·¥á ·¥õ ú…™s ·¥Ñ ú·¥Ä·¥õ ·¥Ä·¥Ö·¥ç…™…¥…™s·¥õ Ä·¥Ä·¥õ·¥è Ä ·¥õ·¥è ·¥ò·¥á ÄÍú∞·¥è Ä·¥ç ·¥õ ú…™s ·¥Ä·¥Ñ·¥õ…™·¥è…¥!</code>"
            f"\n·¥õ ú…™Íú±  ú·¥ÄÍú± …¥·¥è·¥õ ú…™…¥…¢ ·¥õ·¥è ·¥Ö·¥è ·¥°…™·¥õ ú {dispatcher.bot.first_name}'Íú±  Ä…™…¢ ú·¥õÍú±; ·¥õ ú…™Íú± …™Íú± ·¥Ä ü ü ·¥Ä ô·¥è·¥ú·¥õ  è·¥è·¥ú Ä ·¥ò·¥á Ä·¥ç…™Íú±Íú±…™·¥è…¥Íú± ·¥ÄÍú± ·¥Ä…¥ ·¥Ä·¥Ö·¥ç…™…¥. {dispatcher.bot.first_name}  Ä·¥áÍú±·¥ò·¥á·¥Ñ·¥õÍú± ·¥Ä·¥Ö·¥ç…™…¥ ·¥ò·¥á Ä·¥ç…™Íú±Íú±…™·¥è…¥Íú±; …™Íú∞  è·¥è·¥ú ·¥Ö·¥è …¥·¥è·¥õ  ú·¥Ä·¥†·¥á ·¥õ ú·¥á  ô·¥Ä…¥ ·¥úÍú±·¥á ÄÍú± ·¥ò·¥á Ä·¥ç…™Íú±Íú±…™·¥è…¥ ·¥ÄÍú± ·¥Ä ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç ·¥Ä·¥Ö·¥ç…™…¥,  è·¥è·¥ú ·¥°·¥è…¥'·¥õ  ô·¥á ·¥Ä ô ü·¥á ·¥õ·¥è  ô·¥Ä…¥ ·¥úÍú±·¥á ÄÍú± ·¥°…™·¥õ ú {dispatcher.bot.first_name}.Íú±…™·¥ç…™ ü·¥Ä Ä ü è, ·¥õ·¥è ·¥Ñ ú·¥Ä…¥…¢·¥á {dispatcher.bot.first_name} Íú±·¥á·¥õ·¥õ…™…¥…¢Íú±,  è·¥è·¥ú …¥·¥á·¥á·¥Ö ·¥õ·¥è  ú·¥Ä·¥†·¥á ·¥õ ú·¥á ·¥Ñ ú·¥Ä…¥…¢·¥á …¢ Ä·¥è·¥ú·¥ò …™…¥Íú∞·¥è ·¥ò·¥á Ä·¥ç…™Íú±Íú±…™·¥è…¥."
            f"\n\n·¥õ ú·¥á ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á ·¥†·¥á Ä è ·¥Ñ ü·¥á·¥Ä Ä ü è Íú±·¥Ä èÍú± ·¥õ ú·¥Ä·¥õ  è·¥è·¥ú …¥·¥á·¥á·¥Ö ·¥õ ú·¥áÍú±·¥á  Ä…™…¢ ú·¥õÍú±- <i>not {dispatcher.bot.first_name}.</i>",
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton(text="Àπ ô·¥Ä·¥Ñ·¥ã Àº", callback_data="aboutmanu_howto")]]
            ),
        )
    elif query.data == "aboutmanu_spamprot":
        query.message.edit_text(
            text="* ÔΩ¢·¥Ä…¥·¥õ…™-Íú±·¥ò·¥Ä·¥ç Íú±·¥á·¥õ·¥õ…™…¥…¢Íú± üí¨„Äç*"
            "\n- /antispam <on/off/yes/no>: ·¥Ñ ú·¥Ä…¥…¢·¥á ·¥Ä…¥·¥õ…™Íú±·¥ò·¥Ä·¥ç Íú±·¥á·¥Ñ·¥ú Ä…™·¥õ è Íú±·¥á·¥õ·¥õ…™…¥…¢Íú± …™…¥ ·¥õ ú·¥á …¢ Ä·¥è·¥ú·¥ò, ·¥è Ä  Ä·¥á·¥õ·¥ú Ä…¥  è·¥è·¥ú Ä ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ Íú±·¥á·¥õ·¥õ…™…¥…¢Íú±(when no arguments)."
            "\n_·¥õ ú…™Íú±  ú·¥á ü·¥òÍú± ·¥ò Ä·¥è·¥õ·¥á·¥Ñ·¥õ  è·¥è·¥ú ·¥Ä…¥·¥Ö  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥òÍú±  ô è  Ä·¥á·¥ç·¥è·¥†…™…¥…¢ Íú±·¥ò·¥Ä·¥ç Íú∞ ü·¥è·¥è·¥Ö·¥á ÄÍú± ·¥ÄÍú± Q·¥ú…™·¥Ñ·¥ã ü è ·¥ÄÍú± ·¥ò·¥èÍú±Íú±…™ ô ü·¥á._"
            "\n\n- /setflood <int/'no'/'off'>: ·¥á…¥·¥Ä ô ü·¥áÍú± ·¥è Ä ·¥Ö…™Íú±·¥Ä ô ü·¥áÍú± Íú∞ ü·¥è·¥è·¥Ö ·¥Ñ·¥è…¥·¥õ Ä·¥è ü"
            "\n- /setfloodmode <ban/kick/mute/tban/tmute> <value>:·¥Ä·¥Ñ·¥õ…™·¥è…¥ ·¥õ·¥è ·¥ò·¥á ÄÍú∞·¥è Ä·¥ç ·¥° ú·¥á…¥ ·¥úÍú±·¥á Ä  ú·¥Ä·¥†·¥á ·¥áx·¥Ñ·¥á·¥á·¥Ö·¥á·¥Ö Íú∞ ü·¥è·¥è·¥Ö  ü…™·¥ç…™·¥õ. ban/kick/mute/tmute/tban"
            "\n_Antiflood ·¥Ä ü ü·¥è·¥°Íú±  è·¥è·¥ú ·¥õ·¥è ·¥õ·¥Ä·¥ã·¥á ·¥Ä·¥Ñ·¥õ…™·¥è…¥ ·¥è…¥ ·¥úÍú±·¥á ÄÍú± ·¥õ ú·¥Ä·¥õ Íú±·¥á…¥·¥Ö ·¥ç·¥è Ä·¥á ·¥õ ú·¥Ä…¥ x ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥áÍú± …™…¥ ·¥Ä  Ä·¥è·¥°. ·¥áx·¥Ñ·¥á·¥á·¥Ö…™…¥…¢ ·¥õ ú·¥á Íú±·¥á·¥õ Íú∞ ü·¥è·¥è·¥Ö ·¥°…™ ü ü  Ä·¥áÍú±·¥ú ü·¥õ …™…¥  Ä·¥áÍú±·¥õ Ä…™·¥Ñ·¥õ…™…¥…¢ ·¥õ ú·¥Ä·¥õ ·¥úÍú±·¥á Ä._"
            "\n\n- /addblacklist <triggers>: ·¥Ä·¥Ö·¥Ö ·¥Ä ·¥õ Ä…™…¢…¢·¥á Ä ·¥õ·¥è ·¥õ ú·¥á  ô ü·¥Ä·¥Ñ·¥ã ü…™Íú±·¥õ. ·¥á·¥Ä·¥Ñ ú  ü…™…¥·¥á …™Íú± ·¥Ñ·¥è…¥Íú±…™·¥Ö·¥á Ä·¥á·¥Ö ·¥è…¥·¥á ·¥õ Ä…™…¢…¢·¥á Ä, Íú±·¥è ·¥úÍú±…™…¥…¢ ·¥Ö…™Íú∞Íú∞·¥á Ä·¥á…¥·¥õ  ü…™…¥·¥áÍú± ·¥°…™ ü ü ·¥Ä ü ü·¥è·¥°  è·¥è·¥ú ·¥õ·¥è ·¥Ä·¥Ö·¥Ö ·¥ç·¥ú ü·¥õ…™·¥ò ü·¥á ·¥õ Ä…™…¢…¢·¥á ÄÍú±."
            "\n- /blacklistmode <off/del/warn/ban/kick/mute/tban/tmute>: ·¥Ä·¥Ñ·¥õ…™·¥è…¥ ·¥õ·¥è ·¥ò·¥á ÄÍú∞·¥è Ä·¥ç ·¥° ú·¥á…¥ Íú±·¥è·¥ç·¥á·¥è…¥·¥á Íú±·¥á…¥·¥ÖÍú±  ô ü·¥Ä·¥Ñ·¥ã ü…™Íú±·¥õ·¥á·¥Ö ·¥°·¥è Ä·¥ÖÍú±."
            "\n_ ô ü·¥Ä·¥Ñ·¥ã ü…™Íú±·¥õÍú± ·¥Ä Ä·¥á ·¥úÍú±·¥á·¥Ö ·¥õ·¥è Íú±·¥õ·¥è·¥ò ·¥Ñ·¥á Ä·¥õ·¥Ä…™…¥ ·¥õ Ä…™…¢…¢·¥á ÄÍú± Íú∞ Ä·¥è·¥ç  ô·¥á…™…¥…¢ Íú±·¥Ä…™·¥Ö …™…¥ ·¥Ä …¢ Ä·¥è·¥ú·¥ò. ·¥Ä…¥ è ·¥õ…™·¥ç·¥á ·¥õ ú·¥á ·¥õ Ä…™…¢…¢·¥á Ä …™Íú± ·¥ç·¥á…¥·¥õ…™·¥è…¥·¥á·¥Ö, ·¥õ ú·¥á ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á ·¥°…™ ü ü …™·¥ç·¥ç·¥á·¥Ö…™·¥Ä·¥õ·¥á ü è  ô·¥á ·¥Ö·¥á ü·¥á·¥õ·¥á·¥Ö. ·¥Ä …¢·¥è·¥è·¥Ö ·¥Ñ·¥è·¥ç ô·¥è …™Íú± Íú±·¥è·¥ç·¥á·¥õ…™·¥ç·¥áÍú± ·¥õ·¥è ·¥ò·¥Ä…™ Ä ·¥õ ú…™Íú± ·¥ú·¥ò ·¥°…™·¥õ ú ·¥°·¥Ä Ä…¥ Íú∞…™ ü·¥õ·¥á ÄÍú±!_"
            "\n\n- /reports <on/off>: ·¥Ñ ú·¥Ä…¥…¢·¥á  Ä·¥á·¥ò·¥è Ä·¥õ Íú±·¥á·¥õ·¥õ…™…¥…¢, ·¥è Ä ·¥†…™·¥á·¥° ·¥Ñ·¥ú Ä Ä·¥á…¥·¥õ Íú±·¥õ·¥Ä·¥õ·¥úÍú±."
            "\n ‚Ä¢ …™Íú∞ ·¥Ö·¥è…¥·¥á …™…¥ ·¥ò·¥ç, ·¥õ·¥è…¢…¢ ü·¥áÍú±  è·¥è·¥ú Ä Íú±·¥õ·¥Ä·¥õ·¥úÍú±."
            "\n ‚Ä¢ …™Íú∞ …™…¥ ·¥Ñ ú·¥Ä·¥õ, ·¥õ·¥è…¢…¢ ü·¥áÍú± ·¥õ ú·¥Ä·¥õ ·¥Ñ ú·¥Ä·¥õ'Íú± Íú±·¥õ·¥Ä·¥õ·¥úÍú±."
            "\n_…™Íú∞ Íú±·¥è·¥ç·¥á·¥è…¥·¥á …™…¥  è·¥è·¥ú Ä …¢ Ä·¥è·¥ú·¥ò ·¥õ ú…™…¥·¥ãÍú± Íú±·¥è·¥ç·¥á·¥è…¥·¥á …¥·¥á·¥á·¥ÖÍú±  Ä·¥á·¥ò·¥è Ä·¥õ…™…¥…¢, ·¥õ ú·¥á è …¥·¥è·¥°  ú·¥Ä·¥†·¥á ·¥Ä…¥ ·¥á·¥ÄÍú± è ·¥°·¥Ä è ·¥õ·¥è ·¥Ñ·¥Ä ü ü ·¥Ä ü ü ·¥Ä·¥Ö·¥ç…™…¥Íú±._"
            "\n\n- /lock <type>:  ü·¥è·¥Ñ·¥ã …™·¥õ·¥á·¥çÍú± ·¥èÍú∞ ·¥Ä ·¥Ñ·¥á Ä·¥õ·¥Ä…™…¥ ·¥õ è·¥ò·¥á (not available in private)"
            "\n- /locktypes:  ü…™Íú±·¥õÍú± ·¥Ä ü ü ·¥ò·¥èÍú±Íú±…™ ô ü·¥á  ü·¥è·¥Ñ·¥ã·¥õ è·¥ò·¥áÍú±"
            "\n_·¥õ ú·¥á  ü·¥è·¥Ñ·¥ãÍú± ·¥ç·¥è·¥Ö·¥ú ü·¥á ·¥Ä ü ü·¥è·¥°Íú±  è·¥è·¥ú ·¥õ·¥è  ü·¥è·¥Ñ·¥ã ·¥Ä·¥°·¥Ä è Íú±·¥è·¥ç·¥á ·¥Ñ·¥è·¥ç·¥ç·¥è…¥ …™·¥õ·¥á·¥çÍú± …™…¥ ·¥õ ú·¥á ·¥õ·¥á ü·¥á…¢ Ä·¥Ä·¥ç ·¥°·¥è Ä ü·¥Ö; ·¥õ ú·¥á  ô·¥è·¥õ ·¥°…™ ü ü ·¥Ä·¥ú·¥õ·¥è·¥ç·¥Ä·¥õ…™·¥Ñ·¥Ä ü ü è ·¥Ö·¥á ü·¥á·¥õ·¥á ·¥õ ú·¥á·¥ç!_"
            '\n\n- /addwarn <keyword> <reply message>: Íú±·¥á·¥õÍú± ·¥Ä ·¥°·¥Ä Ä…¥…™…¥…¢ Íú∞…™ ü·¥õ·¥á Ä ·¥è…¥ ·¥Ä ·¥Ñ·¥á Ä·¥õ·¥Ä…™…¥ ·¥ã·¥á è·¥°·¥è Ä·¥Ö. …™Íú∞  è·¥è·¥ú ·¥°·¥Ä…¥·¥õ  è·¥è·¥ú Ä ·¥ã·¥á è·¥°·¥è Ä·¥Ö ·¥õ·¥è  ô·¥á ·¥Ä Íú±·¥á…¥·¥õ·¥á…¥·¥Ñ·¥á, ·¥á…¥·¥Ñ·¥è·¥ç·¥ò·¥ÄÍú±Íú± …™·¥õ ·¥°…™·¥õ ú Q·¥ú·¥è·¥õ·¥áÍú±, ·¥ÄÍú± Íú±·¥ú·¥Ñ ú: /addwarn "·¥†·¥á Ä è ·¥Ä…¥…¢ Ä è" ·¥õ ú…™Íú± …™Íú± ·¥Ä…¥ ·¥Ä…¥…¢ Ä è ·¥úÍú±·¥á Ä. '
            "\n- /warn <userhandle>: ·¥°·¥Ä Ä…¥Íú± ·¥Ä ·¥úÍú±·¥á Ä. ·¥ÄÍú∞·¥õ·¥á Ä 3 ·¥°·¥Ä Ä…¥Íú±, ·¥õ ú·¥á ·¥úÍú±·¥á Ä ·¥°…™ ü ü  ô·¥á  ô·¥Ä…¥…¥·¥á·¥Ö Íú∞ Ä·¥è·¥ç ·¥õ ú·¥á …¢ Ä·¥è·¥ú·¥ò. ·¥Ñ·¥Ä…¥ ·¥Ä üÍú±·¥è  ô·¥á ·¥úÍú±·¥á·¥Ö ·¥ÄÍú± ·¥Ä  Ä·¥á·¥ò ü è."
            "\n- /strongwarn <on/yes/off/no>: …™Íú∞ Íú±·¥á·¥õ ·¥õ·¥è ·¥è…¥, ·¥áx·¥Ñ·¥á·¥á·¥Ö…™…¥…¢ ·¥õ ú·¥á ·¥°·¥Ä Ä…¥  ü…™·¥ç…™·¥õ ·¥°…™ ü ü  Ä·¥áÍú±·¥ú ü·¥õ …™…¥ ·¥Ä  ô·¥Ä…¥. ·¥á üÍú±·¥á, ·¥°…™ ü ü ·¥ä·¥úÍú±·¥õ ·¥ã…™·¥Ñ·¥ã."
            "\n_…™Íú∞  è·¥è·¥ú' Ä·¥á  ü·¥è·¥è·¥ã…™…¥…¢ Íú∞·¥è Ä ·¥Ä ·¥°·¥Ä è ·¥õ·¥è ·¥Ä·¥ú·¥õ·¥è·¥ç·¥Ä·¥õ…™·¥Ñ·¥Ä ü ü è ·¥°·¥Ä Ä…¥ ·¥úÍú±·¥á ÄÍú± ·¥° ú·¥á…¥ ·¥õ ú·¥á è Íú±·¥Ä è ·¥Ñ·¥á Ä·¥õ·¥Ä…™…¥ ·¥õ ú…™…¥…¢Íú±, ·¥úÍú±·¥á ·¥õ ú·¥á /addwarm ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥Ö._"
            "\n\n- /welcomemute <off/soft/strong>: ·¥Ä ü ü ·¥úÍú±·¥á ÄÍú± ·¥õ ú·¥Ä·¥õ ·¥ä·¥è…™…¥, …¢·¥á·¥õ ·¥ç·¥ú·¥õ·¥á·¥Ö"
            "\n_ ·¥Ä  ô·¥ú·¥õ·¥õ·¥è…¥ …¢·¥á·¥õÍú± ·¥Ä·¥Ö·¥Ö·¥á·¥Ö ·¥õ·¥è ·¥õ ú·¥á ·¥°·¥á ü·¥Ñ·¥è·¥ç·¥á ·¥ç·¥áÍú±Íú±·¥Ä…¢·¥á Íú∞·¥è Ä ·¥õ ú·¥á·¥ç ·¥õ·¥è ·¥ú…¥·¥ç·¥ú·¥õ·¥á ·¥õ ú·¥á·¥çÍú±·¥á ü·¥†·¥áÍú±. ·¥õ ú…™Íú± ·¥ò Ä·¥è·¥†·¥áÍú± ·¥õ ú·¥á è ·¥Ä Ä·¥á…¥'·¥õ ·¥Ä  ô·¥è·¥õ! Íú±·¥èÍú∞·¥õ -  Ä·¥áÍú±·¥õ Ä…™·¥Ñ·¥õÍú± ·¥úÍú±·¥á ÄÍú± ·¥Ä ô…™ ü…™·¥õ è ·¥õ·¥è ·¥ò·¥èÍú±·¥õ ·¥ç·¥á·¥Ö…™·¥Ä Íú∞·¥è Ä 24  ú·¥è·¥ú ÄÍú±. Íú±·¥õ Ä·¥è…¥…¢ - ·¥ç·¥ú·¥õ·¥áÍú± ·¥è…¥ ·¥ä·¥è…™…¥ ·¥ú…¥·¥õ…™ ü ·¥õ ú·¥á è ·¥ò Ä·¥è·¥†·¥á ·¥õ ú·¥á è' Ä·¥á …¥·¥è·¥õ  ô·¥è·¥õÍú±._",
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup(
                [[InlineKeyboardButton(text="Àπ ô·¥Ä·¥Ñ·¥ã Àº", callback_data="aboutmanu_howto")]]
            ),
        )
    elif query.data == "aboutmanu_tac":
        query.message.edit_text(
            text=f"<b> ÔΩ¢ ·¥õ·¥á Ä·¥çÍú± ·¥Ä…¥·¥Ö ·¥Ñ·¥è…¥·¥Ö…™·¥õ…™·¥è…¥Íú± „Äç</b>\n"
            f"\n<i>·¥õ·¥è ·¥úÍú±·¥á ·¥õ ú…™Íú±  ô·¥è·¥õ,  è·¥è·¥ú …¥·¥á·¥á·¥Ö ·¥õ·¥è  Ä·¥á·¥Ä·¥Ö ·¥õ·¥á Ä·¥çÍú± ·¥Ä…¥·¥Ö ·¥Ñ·¥è…¥·¥Ö…™·¥õ…™·¥è…¥Íú± ·¥Ñ·¥Ä Ä·¥áÍú∞·¥ú ü ü è.</i>\n"
            f"\n‚ú™·¥°·¥á ·¥Ä ü·¥°·¥Ä èÍú±  Ä·¥áÍú±·¥ò·¥á·¥Ñ·¥õ  è·¥è·¥ú Ä ·¥ò Ä…™·¥†·¥Ä·¥Ñ è \n  ·¥°·¥á …¥·¥á·¥†·¥á Ä  ü·¥è…¢ …™…¥·¥õ·¥è  ô·¥è·¥õ'Íú± ·¥Ä·¥ò…™ ·¥Ä…¥·¥Ö Íú±·¥ò è…™…¥…¢ ·¥è…¥  è·¥è·¥ú \n  ·¥°·¥á ·¥úÍú±·¥á ·¥Ä ·¥á…¥·¥Ñ Ä…™·¥ò·¥õ·¥á·¥Ö ·¥Ö·¥Ä·¥õ·¥Ä ô·¥ÄÍú±·¥á \n   ô·¥è·¥õ ·¥°…™ ü ü ·¥Ä·¥ú·¥õ·¥è·¥ç·¥Ä·¥õ…™·¥Ñ·¥Ä ü ü è Íú±·¥õ·¥è·¥òÍú± …™Íú∞ Íú±·¥è·¥ç·¥á·¥è…¥·¥á  ü·¥è…¢…¢·¥á·¥Ö …™…¥ ·¥°…™·¥õ ú ·¥Ä·¥ò…™."
            f"\n‚ú™ ·¥Ä ü·¥°·¥Ä èÍú± ·¥õ Ä è ·¥õ·¥è ·¥ã·¥á·¥á·¥ò ·¥Ñ Ä·¥á·¥Ö…™·¥õÍú±, Íú±·¥è \n  ·¥õ ú…™Íú±  ú·¥Ä Ä·¥Ö·¥°·¥è Ä·¥ã …™Íú± ·¥Ö·¥è…¥·¥á  ô è ·¥õ·¥á·¥Ä·¥ç Íú±…™ ü·¥á…¥·¥õ Íú±·¥ò·¥á…¥·¥Ö…™…¥…¢ ·¥ç·¥Ä…¥ è Íú± ü·¥á·¥á·¥ò ü·¥áÍú±Íú± …¥…™…¢ ú·¥õÍú±.. Íú±·¥è,  Ä·¥áÍú±·¥ò·¥á·¥Ñ·¥õ …™·¥õ."
            f"\n‚ú™ Íú±·¥è·¥ç·¥á ·¥ç·¥è·¥Ö·¥ú ü·¥áÍú± …™…¥ ·¥õ ú…™Íú±  ô·¥è·¥õ …™Íú± ·¥è·¥°…¥·¥á·¥Ö  ô è ·¥Ö…™Íú∞Íú∞·¥á Ä·¥á…¥·¥õ ·¥Ä·¥ú·¥õ ú·¥è ÄÍú±, Íú±·¥è, \n  ·¥Ä ü ü ·¥Ñ Ä·¥á·¥Ö…™·¥õÍú± …¢·¥è·¥áÍú± ·¥õ·¥è ·¥õ ú·¥á·¥ç \n  Also for <b>Paul Larson for Marie</b>."
            f"\n‚ú™ …™Íú∞  è·¥è·¥ú …¥·¥á·¥á·¥Ö ·¥õ·¥è ·¥ÄÍú±·¥ã ·¥Ä…¥ è·¥õ ú…™…¥…¢ ·¥Ä ô·¥è·¥ú·¥õ\n  ·¥õ ú…™Íú±  ô·¥è·¥õ, …¢·¥è @{SUPPORT_CHAT}."
            f"\n‚ú™ …™Íú∞  è·¥è·¥ú ·¥ÄÍú±·¥ã…™…¥…¢ …¥·¥è…¥Íú±·¥á…¥Íú±·¥á …™…¥ Íú±·¥ú·¥ò·¥ò·¥è Ä·¥õ \n  ·¥Ñ ú·¥Ä·¥õ,  è·¥è·¥ú ·¥°…™ ü ü …¢·¥á·¥õ ·¥°·¥Ä Ä…¥·¥á·¥Ö/ ô·¥Ä…¥…¥·¥á·¥Ö."
            f"\n‚ú™ ·¥Ä ü ü ·¥Ä·¥ò…™'Íú± ·¥°·¥á ·¥úÍú±·¥á·¥Ö ·¥è·¥°…¥·¥á·¥Ö  ô è ·¥è Ä…™…¢…™…¥…¥·¥Ä ü ·¥Ä·¥ú·¥õ ú·¥è ÄÍú± \n  Some api's we use Free version \n  ·¥ò ü·¥á·¥ÄÍú±·¥á ·¥Ö·¥è…¥'·¥õ ·¥è·¥†·¥á Ä·¥úÍú±·¥á ·¥Ä…™ ·¥Ñ ú·¥Ä·¥õ."
            f"\n‚ú™ ·¥°·¥á ·¥Ö·¥è…¥'·¥õ ·¥ò Ä·¥è·¥†…™·¥Ö·¥á ·¥Ä…¥ è Íú±·¥ú·¥ò·¥ò·¥è Ä·¥õ ·¥õ·¥è Íú∞·¥è Ä·¥ãÍú±,\n  Íú±·¥è ·¥õ ú·¥áÍú±·¥á ·¥õ·¥á Ä·¥çÍú± ·¥Ä…¥·¥Ö ·¥Ñ·¥è…¥·¥Ö…™·¥õ…™·¥è…¥Íú± …¥·¥è·¥õ ·¥Ä·¥ò·¥ò ü…™·¥á·¥Ö ·¥õ·¥è Íú∞·¥è Ä·¥ãÍú± \n  …™Íú∞  è·¥è·¥ú ·¥Ä Ä·¥á ·¥úÍú±…™…¥…¢ ·¥Ä Íú∞·¥è Ä·¥ã ·¥èÍú∞ ·¥õ ú·¥á ·¥Ä…¥…¢·¥á ü  ô·¥è·¥õ ·¥°·¥á ·¥Ä Ä·¥á …¥·¥è·¥õ  Ä·¥áÍú±·¥ò·¥èÍú±…™ ô ü·¥á Íú∞·¥è Ä ·¥Ä…¥ è·¥õ ú…™…¥…¢."
            f"\n\nÍú∞·¥è Ä ·¥Ä…¥ è ·¥ã…™…¥·¥Ö ·¥èÍú∞  ú·¥á ü·¥ò,  Ä·¥á ü·¥Ä·¥õ·¥á·¥Ö ·¥õ·¥è ·¥õ ú…™Íú±  ô·¥è·¥õ, Join @{SUPPORT_CHAT}."
            f"\n\n<i>·¥õ·¥á Ä·¥çÍú± & ·¥Ñ·¥è…¥·¥Ö…™·¥õ…™·¥è…¥Íú± ·¥°…™ ü ü  ô·¥á ·¥Ñ ú·¥Ä…¥…¢·¥á·¥Ö ·¥Ä…¥ è·¥õ…™·¥ç·¥á</i>\n",
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            text="Credits", callback_data="aboutmanu_credit"
                        ),
                        InlineKeyboardButton(text="Àπ ô·¥Ä·¥Ñ·¥ã Àº", callback_data="aboutmanu_"),
                    ]
                ]
            ),
        )


@run_async
@typing_action
def get_help(update, context):
    chat = update.effective_chat  # type: Optional[Chat]
    args = update.effective_message.text.split(None, 1)

    # ONLY send help in PM
    if chat.type != chat.PRIVATE:
        if len(args) >= 2 and any(args[1].lower() == x for x in HELPABLE):
            module = args[1].lower()
            update.effective_message.reply_text(
                f"Contact me in PM to get help of {module.capitalize()}",
                reply_markup=InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton(
                                text="Help",
                                url="t.me/{}?start=ghelp_{}".format(
                                    context.bot.username, module
                                ),
                            )
                        ]
                    ]
                ),
            )
            return
        update.effective_message.reply_text(
            "·¥Ñ·¥è…¥·¥õ·¥Ä·¥Ñ·¥õ ·¥ç·¥á …™…¥ ·¥ò·¥ç ·¥õ·¥è …¢·¥á·¥õ ·¥õ ú·¥á  ü…™Íú±·¥õ ·¥èÍú∞ ·¥ò·¥èÍú±Íú±…™ ô ü·¥á ·¥Ñ·¥è·¥ç·¥ç·¥Ä…¥·¥ÖÍú±.",
            reply_markup=InlineKeyboardMarkup(
                [
                    [
                        InlineKeyboardButton(
                            text="Help",
                            url="t.me/{}?start=help".format(context.bot.username),
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="Support Chat",
                            url="https://t.me/{}".format(SUPPORT_CHAT),
                        )
                    ],
                ]
            ),
        )
        return

    elif len(args) >= 2 and any(args[1].lower() == x for x in HELPABLE):
        module = args[1].lower()
        text = (
            "Here is the available help for the *{}* module:\n".format(
                HELPABLE[module].__mod_name__
            )
            + HELPABLE[module].__help__
        )
        send_help(
            chat.id,
            text,
            InlineKeyboardMarkup(
                [[InlineKeyboardButton(text="Àπ ô·¥Ä·¥Ñ·¥ã Àº", callback_data="help_back")]]
            ),
        )

    else:
        send_help(chat.id, HELP_STRINGS)


def send_settings(chat_id, user_id, user=False):
    if user:
        if USER_SETTINGS:
            settings = "\n\n".join(
                "*{}*:\n{}".format(mod.__mod_name__, mod.__user_settings__(user_id))
                for mod in USER_SETTINGS.values()
            )
            dispatcher.bot.send_message(
                user_id,
                "These are your current settings:" + "\n\n" + settings,
                parse_mode=ParseMode.MARKDOWN,
            )

        else:
            dispatcher.bot.send_message(
                user_id,
                "Seems like there aren't any user specific settings available :'(",
                parse_mode=ParseMode.MARKDOWN,
            )

    else:
        if CHAT_SETTINGS:
            chat_name = dispatcher.bot.getChat(chat_id).title
            dispatcher.bot.send_message(
                user_id,
                text="Which module would you like to check {}'s settings for?".format(
                    chat_name
                ),
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(0, CHAT_SETTINGS, "stngs", chat=chat_id)
                ),
            )
        else:
            dispatcher.bot.send_message(
                user_id,
                "Seems like there aren't any chat settings available :'(\nSend this "
                "in a group chat you're admin in to find its current settings!",
                parse_mode=ParseMode.MARKDOWN,
            )


@run_async
def settings_button(update, context):
    query = update.callback_query
    user = update.effective_user
    mod_match = re.match(r"stngs_module\((.+?),(.+?)\)", query.data)
    prev_match = re.match(r"stngs_prev\((.+?),(.+?)\)", query.data)
    next_match = re.match(r"stngs_next\((.+?),(.+?)\)", query.data)
    back_match = re.match(r"stngs_back\((.+?)\)", query.data)
    try:
        if mod_match:
            chat_id = mod_match.group(1)
            module = mod_match.group(2)
            chat = context.bot.get_chat(chat_id)
            text = "*{}* has the following settings for the *{}* module:\n\n".format(
                escape_markdown(chat.title), CHAT_SETTINGS[module].__mod_name__
            ) + CHAT_SETTINGS[module].__chat_settings__(chat_id, user.id)
            query.message.edit_text(
                text=text,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton(
                                text="Back",
                                callback_data="stngs_back({})".format(chat_id),
                            )
                        ]
                    ]
                ),
            )

        elif prev_match:
            chat_id = prev_match.group(1)
            curr_page = int(prev_match.group(2))
            chat = context.bot.get_chat(chat_id)
            query.message.edit_text(
                "Hi there! There are quite a few settings for *{}* - go ahead and pick what "
                "you're interested in.".format(chat.title),
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(
                        curr_page - 1, CHAT_SETTINGS, "stngs", chat=chat_id
                    )
                ),
            )

        elif next_match:
            chat_id = next_match.group(1)
            next_page = int(next_match.group(2))
            chat = context.bot.get_chat(chat_id)
            query.message.edit_text(
                "Hi there! There are quite a few settings for *{}* - go ahead and pick what "
                "you're interested in.".format(chat.title),
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(
                        next_page + 1, CHAT_SETTINGS, "stngs", chat=chat_id
                    )
                ),
            )

        elif back_match:
            chat_id = back_match.group(1)
            chat = context.bot.get_chat(chat_id)
            query.message.edit_text(
                text="Hi there! There are quite a few settings for *{}* - go ahead and pick what "
                "you're interested in.".format(escape_markdown(chat.title)),
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=InlineKeyboardMarkup(
                    paginate_modules(0, CHAT_SETTINGS, "stngs", chat=chat_id)
                ),
            )

        # ensure no spinny white circle
        context.bot.answer_callback_query(query.id)
        # query.message.delete()
    except Exception as excp:
        if excp.message == "Message is not modified":
            pass
        elif excp.message == "Query_id_invalid":
            pass
        elif excp.message == "Message can't be deleted":
            pass
        else:
            query.message.edit_text(excp.message)
            LOGGER.exception("Exception in settings buttons. %s", str(query.data))


@run_async
def get_settings(update: Update, context: CallbackContext):
    chat = update.effective_chat  # type: Optional[Chat]
    user = update.effective_user  # type: Optional[User]
    msg = update.effective_message  # type: Optional[Message]

    # ONLY send settings in PM
    if chat.type != chat.PRIVATE:
        if is_user_admin(chat, user.id):
            text = "Click here to get this chat's settings, as well as yours."
            msg.reply_text(
                text,
                reply_markup=InlineKeyboardMarkup(
                    [
                        [
                            InlineKeyboardButton(
                                text="Settings",
                                url="t.me/{}?start=stngs_{}".format(
                                    context.bot.username, chat.id
                                ),
                            )
                        ]
                    ]
                ),
            )
        else:
            text = "Click here to check your settings."

    else:
        send_settings(chat.id, user.id, True)


def migrate_chats(update, context):
    msg = update.effective_message  # type: Optional[Message]
    if msg.migrate_to_chat_id:
        old_chat = update.effective_chat.id
        new_chat = msg.migrate_to_chat_id
    elif msg.migrate_from_chat_id:
        old_chat = msg.migrate_from_chat_id
        new_chat = update.effective_chat.id
    else:
        return

    LOGGER.info("Migrating from %s, to %s", str(old_chat), str(new_chat))
    for mod in MIGRATEABLE:
        mod.__migrate__(old_chat, new_chat)

    LOGGER.info("Successfully migrated!")
    raise DispatcherHandlerStop


def is_chat_allowed(update, context):
    if len(WHITELIST_CHATS) != 0:
        chat_id = update.effective_message.chat_id
        if chat_id not in WHITELIST_CHATS:
            context.bot.send_message(
                chat_id=update.message.chat_id, text="Unallowed chat! Leaving..."
            )
            try:
                context.bot.leave_chat(chat_id)
            finally:
                raise DispatcherHandlerStop
    if len(BL_CHATS) != 0:
        chat_id = update.effective_message.chat_id
        if chat_id in BL_CHATS:
            context.bot.send_message(
                chat_id=update.message.chat_id, text="Unallowed chat! Leaving..."
            )
            try:
                context.bot.leave_chat(chat_id)
            finally:
                raise DispatcherHandlerStop
    if len(WHITELIST_CHATS) != 0 and len(BL_CHATS) != 0:
        chat_id = update.effective_message.chat_id
        if chat_id in BL_CHATS:
            context.bot.send_message(
                chat_id=update.message.chat_id, text="Unallowed chat, leaving"
            )
            try:
                context.bot.leave_chat(chat_id)
            finally:
                raise DispatcherHandlerStop
    else:
        pass


@run_async
def donate(update: Update, context: CallbackContext):
    update.effective_message.from_user
    chat = update.effective_chat  # type: Optional[Chat]
    context.bot
    if chat.type == "private":
        update.effective_message.reply_text(
            DONATE_STRING, parse_mode=ParseMode.MARKDOWN, disable_web_page_preview=True
        )
        update.effective_message.reply_text(
            "You can also donate to the person currently running me "
            "[here]({})".format(DONATION_LINK),
            parse_mode=ParseMode.MARKDOWN,
        )

    else:
        pass


def main():

    if SUPPORT_CHAT is not None and isinstance(SUPPORT_CHAT, str):
        try:
            dispatcher.bot.sendMessage(f"@{SUPPORT_CHAT}", "¬ª ‚ù§Ô∏è‚Äçü©π‚ú®…¥·¥è Íú∞·¥á·¥Ä Ä ·¥°·¥á…¥ ·¥Ä…¥…¢·¥á ü …™s  ú·¥á Ä·¥á ‚ú®üëª ¬´")
        except Unauthorized:
            LOGGER.warning(
                "Bot isnt able to send message to support_chat, go and check!"
            )
        except BadRequest as e:
            LOGGER.warning(e.message)

    # test_handler = CommandHandler("test", test)
    start_handler = CommandHandler("start", start, pass_args=True)

    help_handler = CommandHandler("help", get_help)
    help_callback_handler = CallbackQueryHandler(help_button, pattern=r"help_")

    settings_handler = CommandHandler("settings", get_settings)
    settings_callback_handler = CallbackQueryHandler(settings_button, pattern=r"stngs_")

    about_callback_handler = CallbackQueryHandler(
        Angel_about_callback, pattern=r"aboutmanu_"
    )

    donate_handler = CommandHandler("donate", donate)

    migrate_handler = MessageHandler(Filters.status_update.migrate, migrate_chats)
    is_chat_allowed_handler = MessageHandler(Filters.group, is_chat_allowed)

    # dispatcher.add_handler(test_handler)
    dispatcher.add_handler(start_handler)
    dispatcher.add_handler(about_callback_handler)
    dispatcher.add_handler(help_handler)
    dispatcher.add_handler(settings_handler)
    dispatcher.add_handler(help_callback_handler)
    dispatcher.add_handler(settings_callback_handler)
    dispatcher.add_handler(migrate_handler)
    dispatcher.add_handler(is_chat_allowed_handler)
    dispatcher.add_handler(donate_handler)

    dispatcher.add_error_handler(error_handler)

    if WEBHOOK:
        LOGGER.info("Using webhooks.")
        updater.start_webhook(listen="0.0.0.0", port=PORT, url_path=TOKEN)

        if CERT_PATH:
            updater.bot.set_webhook(url=URL + TOKEN, certificate=open(CERT_PATH, "rb"))
        else:
            updater.bot.set_webhook(url=URL + TOKEN)
            client.run_until_disconnected()

    else:
        LOGGER.info("Using long polling.")
        updater.start_polling(timeout=15, read_latency=4, clean=True)

    if len(argv) not in (1, 3, 4):
        telethn.disconnect()
    else:
        telethn.run_until_disconnected()

    updater.idle()


if __name__ == "__main__":
    LOGGER.info("Successfully loaded modules: " + str(ALL_MODULES))
    telethn.start(bot_token=TOKEN)
    pbot.start()
    main()
